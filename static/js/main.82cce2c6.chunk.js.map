{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["url","App","useState","panel","setPanel","translation","setTranslation","inputRefSim2Tra","useRef","inputRefTra2Sim","content","InputGroup","key","Prepend","Text","FormControl","id","as","aria-label","ref","Button","variant","onClick","current","value","fetch","method","body","JSON","stringify","text","headers","then","response","res","status","data","catch","err","Jumbotron","fluid","Container","getContent","Card","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"wRAWMA,EAAM,4CA4KGC,MA1Kf,WAAgB,IAAD,EACaC,mBAAS,WADtB,mBACNC,EADM,KACCC,EADD,OAEyBF,mBAAS,IAFlC,mBAENG,EAFM,KAEOC,EAFP,KAIPC,EAAkBC,iBAA4B,MAC9CC,EAAkBD,iBAA4B,MAE9CE,EAEN,SAAoBP,GAClB,OAAQA,GACN,IAAK,UACH,OAWF,6BACE,kBAACQ,EAAA,EAAD,CAAYC,IAAI,WACd,kBAACD,EAAA,EAAWE,QAAZ,KACE,kBAACF,EAAA,EAAWG,KAAZ,8CAEF,kBAACC,EAAA,EAAD,CAAaC,GAAG,UAAUC,GAAG,WAAWC,aAAW,UAAUC,IAAKZ,KAEpE,kBAACa,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,WACP,IAAMC,EAAUhB,EAAgBgB,QAChC,GAAe,MAAXA,EAAJ,CACA,IAAMC,EAAQD,EAAQC,MACtBC,MAAM,GAAD,OAAIzB,EAAJ,2BAAkC,CACrC0B,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAMN,IAERO,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GACL,IAAMC,EAAMD,EACZ,GAAmB,MAAfC,EAAIC,OACN,OAAOD,EAAIJ,OAAOE,MAAK,SAACI,GACtB9B,EAAe8B,MAGjB9B,EAAe,eAGlB+B,OAAM,SAACC,GACNhC,EAAe,UAAD,OAAWgC,UA1BjC,WAgCiB,KAAhBjC,EACC,kBAACkC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,2BAAIpC,KAGN,MAvDN,IAAK,UACH,OA6DF,6BACE,kBAACM,EAAA,EAAD,CAAYC,IAAI,WACd,kBAACD,EAAA,EAAWE,QAAZ,KACE,kBAACF,EAAA,EAAWG,KAAZ,+CAEF,kBAACC,EAAA,EAAD,CAAaE,GAAG,WAAWC,aAAW,UAAUC,IAAKV,KAEvD,kBAACW,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,WACP,IAAMC,EAAUd,EAAgBc,QAChC,GAAe,MAAXA,EAAJ,CACA,IAAMC,EAAQD,EAAQC,MACtBC,MAAM,GAAD,OAAIzB,EAAJ,2BAAkC,CACrC0B,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAMN,IAERO,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GACL,IAAMC,EAAMD,EACZ,GAAmB,MAAfC,EAAIC,OACN,OAAOD,EAAIJ,OAAOE,MAAK,SAACI,GACtB9B,EAAe8B,MAGjB9B,EAAe,eAGlB+B,OAAM,SAACC,GACNhC,EAAe,UAAD,OAAWgC,UA1BjC,WAgCiB,KAAhBjC,EACC,kBAACkC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,2BAAIpC,KAGN,MAzGN,IAAK,UACL,QACE,MAAO,WAVGqC,CAAWvC,GAsH3B,OACE,kBAACsC,EAAA,EAAD,CAAWD,MAAM,MACf,kBAACG,EAAA,EAAD,CAAMhB,MAAI,GACR,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,CACEhB,MAAI,EACJL,QAAS,WACPlB,EAAS,aAHb,YASF,kBAACyC,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,CACEhB,MAAI,EACJL,QAAS,WACPlB,EAAS,aAHb,8BASF,kBAACyC,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,CACEhB,MAAI,EACJL,QAAS,WACPlB,EAAS,aAHb,gCAWN,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAMnC,OCpKIoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82cce2c6.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useRef } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nconst url = 'https://fierce-beyond-09623.herokuapp.com';\n\nfunction App() {\n  const [panel, setPanel] = useState('Welcome');\n  const [translation, setTranslation] = useState('');\n  // const [characters, setCharacters] = useState('');\n  const inputRefSim2Tra = useRef<HTMLTextAreaElement>(null);\n  const inputRefTra2Sim = useRef<HTMLTextAreaElement>(null);\n\n  const content = getContent(panel);\n\n  function getContent(panel: string) {\n    switch (panel) {\n      case 'Sim2Tra':\n        return getSim2TraContent();\n      case 'Tra2Sim':\n        return getTra2SimContent();\n      case 'Welcome':\n      default:\n        return 'Welcome';\n    }\n  }\n\n  function getSim2TraContent() {\n    return (\n      <div>\n        <InputGroup key=\"sim2tra\">\n          <InputGroup.Prepend>\n            <InputGroup.Text>Please type in simplified characters</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl id=\"Sim2Tra\" as=\"textarea\" aria-label=\"Sim2Tra\" ref={inputRefSim2Tra} />\n        </InputGroup>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            const current = inputRefSim2Tra.current;\n            if (current == null) return;\n            const value = current.value;\n            fetch(`${url}/api/conversion/sim2tra`, {\n              method: 'post',\n              body: JSON.stringify({\n                text: value,\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n              },\n            })\n              .then((response) => {\n                const res = response;\n                if (res.status === 200) {\n                  return res.text().then((data: string) => {\n                    setTranslation(data);\n                  });\n                } else {\n                  setTranslation('Error!!!');\n                }\n              })\n              .catch((err) => {\n                setTranslation(`Error: ${err}`);\n              });\n          }}\n        >\n          Convert\n        </Button>\n        {translation !== '' ? (\n          <Jumbotron fluid>\n            <Container>\n              <p>{translation}</p>\n            </Container>\n          </Jumbotron>\n        ) : null}\n      </div>\n    );\n  }\n\n  function getTra2SimContent() {\n    return (\n      <div>\n        <InputGroup key=\"tra2sim\">\n          <InputGroup.Prepend>\n            <InputGroup.Text>Please type in traditional characters</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\" aria-label=\"Tra2Sim\" ref={inputRefTra2Sim} />\n        </InputGroup>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            const current = inputRefTra2Sim.current;\n            if (current == null) return;\n            const value = current.value;\n            fetch(`${url}/api/conversion/tra2sim`, {\n              method: 'post',\n              body: JSON.stringify({\n                text: value,\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n              },\n            })\n              .then((response) => {\n                const res = response;\n                if (res.status === 200) {\n                  return res.text().then((data: string) => {\n                    setTranslation(data);\n                  });\n                } else {\n                  setTranslation('Error!!!');\n                }\n              })\n              .catch((err) => {\n                setTranslation(`Error: ${err}`);\n              });\n          }}\n        >\n          Convert\n        </Button>\n        {translation !== '' ? (\n          <Jumbotron fluid>\n            <Container>\n              <p>{translation}</p>\n            </Container>\n          </Jumbotron>\n        ) : null}\n      </div>\n    );\n  }\n\n  return (\n    <Container fluid=\"lg\">\n      <Card body>\n        <Row>\n          <Col>\n            <Card\n              body\n              onClick={() => {\n                setPanel('Welcome');\n              }}\n            >\n              Welcome\n            </Card>\n          </Col>\n          <Col>\n            <Card\n              body\n              onClick={() => {\n                setPanel('Sim2Tra');\n              }}\n            >\n              Simplified to Traditional\n            </Card>\n          </Col>\n          <Col>\n            <Card\n              body\n              onClick={() => {\n                setPanel('Tra2Sim');\n              }}\n            >\n              Traditional to Simplified\n            </Card>\n          </Col>\n        </Row>\n      </Card>\n      <Card>\n        <Row>\n          <Col>{content}</Col>\n        </Row>\n      </Card>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}